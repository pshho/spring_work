package inter;

import java.util.List;

public interface Quick<T> {
	default void quickDistinct(int left, int right, List<T> arrays) {
		if(left >= right) {
			return;
		}
		int pivot = left;
		int lefts = pivot+1;
		int rights = right;
		
		while(lefts <= rights) {
			while(lefts<=rights && arrays.get(pivot) >= arrays.get(lefts)) {
				lefts++;
			}
			
			while(lefts<=rights && arrays[pivot] <= arrays[rights]) {
				rights--;
			}
			
			if(lefts < rights) {
				int temp = arrays[lefts];
				arrays[lefts] = arrays[rights];
				arrays[rights] = temp;
			}
		}
		
		int temp = arrays[pivot];
		arrays[pivot] = arrays[rights];
		arrays[rights] = temp;
		
		quickDistinct(left, rights-1, arrays);
		quickDistinct(rights+1, right, arrays);
	}
	
	public int compare(Object o);
}
